
// ===================================================================================
// Canvas setup  
const simulationCanvas = document.getElementById("simulationCanvas");
const ctx = simulationCanvas.getContext("2d");
simulationCanvas.width = 600;
simulationCanvas.height = 240;
let N = 5;
let NX = simulationCanvas.width / N;
let NY = simulationCanvas.height / N;

let animating = true;

// ======================================================================================
// Fluid grid set up  

//velocity directions
const e = [
    [0, 0],                                   // 0
    [0, 1], [1, 1], [1, 0], [1, -1],          // N1, NE2, E3, SE4
    [0, -1], [-1, -1], [-1, 0], [-1, 1]       // S5, SW6, W7, NW8     
];
// weights 
const w = [
    4 / 9,                                    // N0
    1 / 9, 1 / 36, 1 / 9, 1 / 36,             // N1, NE2, E3, SE4
    1 / 9, 1 / 36, 1 / 9, 1 / 36              // S5, SW6, W7, NW8
];

// obstacle measurements 
let obsRadius = NY * 0.1;
let obsXpos = NX * 0.1;
let obsYpos = NY * 0.5;
const startAngle = 0;
const endAngle = Math.PI * 2;


const Re = document.getElementById("reynoldsInput");
const reynoldsDisplay = document.getElementById("reynoldsDisplay");

let deltaT = 5;                             //time step
let timeStep = 0;
let ux0 = 0.2;                                //initial x velocity 
let uy0 = 0;                                  //initial y velocity 
let rho = 1;                                  //initial density 
let mu = ux0 * obsRadius / Re.value;	                          //viscosity
let omega = 1 / (3 * mu + 0.5);             //relaxation parameter

const Cell = (rho, ux, uy, isObstacle) => {
    let fi = new Array(9);
    let feq = new Array(9);
    let vorticity = 0;
    return {
        rho,
        ux,
        uy,
        vorticity,
        fi,
        feq,
        isObstacle,
    }
}

let grid = new Array(NX * NY);

function createGrid() {
    for (let i = 0; i <= NX; i++) {
        for (let j = 0; j <= NY; j++) {
            grid[IX(i, j)] = Cell(1, 0, 0, false);
        }
    }
}

createGrid()
let T = 0;
let c = 0.1;
// Obstacle 

function setObstacle(radius, xpos, ypos, startAngle, endAngle, shape, moving) {
    clearObstacles();
    if (moving) {
        incrementPosition();
    } else {
        T = 0;
    }

    switch (shape) {
        case "line":
            for (let x = 1; x <= 2; x++) {
                for (let y = ypos - radius; y <= ypos + radius; y++) {
                    grid[IX(Math.round(xpos + x), Math.round(y + T * 10))].isObstacle = true;
                }
            }
            break;
        case "circle":

            for (let t = 0; t < Math.PI * 2; t += 0.01) {
                for (let n = 0; n < radius; n++) {
                    let x = xpos + n * Math.cos(t);
                    let y = ypos + n * Math.sin(t);
                    grid[IX(Math.round(x + 10 * T), Math.round(y))].isObstacle = true;

                }
            };

            break;
        case "astroid":
            let theta = T * Math.PI * 2;
            for (let t = 0; t <= Math.PI * 2; t += 0.01) {
                let x = (Math.cos(t) ** 3) * Math.cos(theta) - (Math.sin(t) ** 3) * Math.sin(theta);
                let y = Math.sin(theta) * (Math.cos(t) ** 3) + Math.cos(theta) * (Math.sin(t) ** 3);
                // xcos(θ)−ysin(θ),xsin(θ)+ycos(θ))
                grid[IX(Math.round(xpos + x * 5), Math.round(ypos + y * 5))].isObstacle = true;
            }

            break;

        case "star":
            for (let t = 0; t < Math.PI * 10; t += 0.0001) {
                let x = 2 * Math.cos(t) + 5 * Math.cos(2 * t / 3);
                let y = 2 * Math.sin(t) - 5 * Math.sin(2 * t / 3);
                grid[IX(Math.round(xpos + x), Math.round(ypos + y))].isObstacle = true;
            }

        case "airfoil":
            // Parametric equation for airfoils, based on the paper by David Ziemkiewicz - https://arc.aiaa.org/doi/full/10.2514/1.J055986
            let thickness = 6 + 3 * T;
            let B = 2;
            let P = 1;
            let C = -0.05;
            let E = 1;
            let R = 0;
            for (let n = 0; n <= thickness; n++) {
                for (let t = 0.01; t < Math.PI * 2; t += 0.01) {
                    let x = 0.5 + (0.5 * (Math.cos(t) ** B)) / Math.cos(t);
                    let y = (n / 20) * ((Math.sin(t) ** B) / Math.sin(t)) * (1 - x ** P) + C * Math.sin((x ** E) * Math.PI) + R * Math.sin(x * Math.PI * 2);
                    grid[IX(Math.round(xpos + x * 20), Math.round(ypos + y * 20))].isObstacle = true;
                }
            }
        default:

        // code block
    }

}

function incrementPosition() {
    T += c;
    if (T > 1.5 || T <= 0) c *= -1;
}

// ======================================================================================
// PHYSICS STUFF

function setEquilibrium(ux, uy, rho) {
    let f = [];
    for (let n = 0; n < 9; n++) {
        let a = 3 * (e[n][0] * ux + e[n][1] * uy);
        let b = 4.5 * Math.pow((e[n][0] * ux + e[n][1] * uy), 2);
        let c = 1.5 * (Math.pow(ux, 2) + Math.pow(uy, 2));
        f[n] = w[n] * rho * (1 + a + b - c);
    }
    return f;
}
function initialize() {
    for (let i = 0; i < NX; i++) {
        for (let j = 0; j < NY; j++) {
            grid[IX(i, j)].fi = setEquilibrium(ux0, uy0, rho);
        }
    }
}
// collision step 
function collide() {
    for (let i = 0; i < NX; i++) {
        for (let j = 0; j < NY; j++) {
            let index = IX(i, j);
            grid[index].rho = sumMatrix(grid[index].fi);
            grid[index].ux = 0;
            grid[index].uy = 0;

            for (let n = 0; n < 9; n++) {
                grid[index].ux += (e[n][0] * grid[index].fi[n]) / grid[index].rho;
                grid[index].uy += (e[n][1] * grid[index].fi[n]) / grid[index].rho;
            }

            let feq = setEquilibrium(grid[index].ux, grid[index].uy, grid[index].rho);
            for (let n = 0; n < 9; n++) {
                grid[index].fi[n] += omega * (feq[n] - grid[index].fi[n]);
            }

        }
    }


}
//  in-place streaming, with bounce back boundary condition  
const fbounce = [0, 5, 6, 7, 8, 1, 2, 3, 4];
function stream() {
    // N NE E SE S        
    for (let x = NX - 2; x > 0; x--) {
        for (let y = NY - 2; y > 0; y--) {
            grid[IX(x, y)].fi[1] = grid[IX(x, y - 1)].fi[1];
            grid[IX(x, y)].fi[2] = grid[IX(x - 1, y - 1)].fi[2];
            grid[IX(x, y)].fi[3] = grid[IX(x - 1, y)].fi[3];
            grid[IX(x, y)].fi[4] = grid[IX(x - 1, y + 1)].fi[4];
        }
        for (let y = 1; y < NY - 1; y++) {
            grid[IX(x, y)].fi[5] = grid[IX(x, y + 1)].fi[5];
        }
    }

    for (let x = 1; x < NX - 2; x++) {
        for (let y = NY - 2; y > 1; y--) {
            // SW W NW
            grid[IX(x, y)].fi[6] = grid[IX(x + 1, y + 1)].fi[6];
            grid[IX(x, y)].fi[7] = grid[IX(x + 1, y)].fi[7];
            grid[IX(x, y)].fi[8] = grid[IX(x + 1, y - 1)].fi[8];
            // handle obstacles 
            if (grid[IX(x, y)].isObstacle) {
                for (let n = 1; n < 9; n++) {
                    grid[IX(x, y)].fi[n] = grid[IX(x, y)].fi[fbounce[n]];
                }
            }
        }
    }


}
// ==================================================================================================
//set obstacles 
const shapeOptionButtons = document.querySelectorAll('#shapeSelectionForm>*');
let shapeSelection = "airfoil";

setObstacle(obsRadius, obsXpos, obsYpos, startAngle, endAngle, shapeSelection, 0.1);
// ======================================================================================
// DRAW STUFF  
// COLOR MAPS  
const plotOptionButtons = document.querySelectorAll('#plotSelectionForm>*');
const formInputs = document.querySelectorAll('#colors input');
let plotSelection = "vorticity";





// linear color map generator 
function lerp(low, high, t) { return high + (low - high) * t };
// CUBE HELIX COLOR MAP - based on this paper (https://astron-soc.in/bulletin/11June/289392011.pdf)
// BY D. A. Green Cavendish Laboratory, 19 J. J. Thomson Avenue, Cambridge CB3 0HE, U.K.
function cubehelixGenerator(gamma, start, rotations, hue, length) {
    let cmap = [];
    for (let i = 1; i < length; i++) {
        let fract = (i - 1) / (length - 1);
        let angle = 2 * Math.PI * (start / 3 + 1 + rotations * fract);
        fract = fract ** gamma;
        let AMP = hue * fract * (1 - fract) / 2;
        let R = fract + AMP * (-0.14861 * Math.cos(angle) + 1.78277 * Math.sin(angle));
        let G = fract + AMP * (-0.29227 * Math.cos(angle) - 0.90649 * Math.sin(angle));
        let B = fract + AMP * (+1.97294 * Math.cos(angle));
        cmap.push(`rgb(${R * 256},${G * 256},${B * 256})`);
    }
    return cmap;
}
const cubehelix = {
    Uy: cubehelixGenerator(0.9, 1.5, 1, 1, 1000),
    Ux: cubehelixGenerator(0.9, 0, 1, 1, 1000),
    v: cubehelixGenerator(0.8, 1, 2, 1, 1000),
    rho: cubehelixGenerator(1, 10, 3, 1, 1000),
    psychedelic: cubehelixGenerator(0.48, 100, 10, 1.5, 1000),
}

// other color maps adopted from Matplotlib team, Stefan van der Walt, Nathaniel J. Smith, Jey Kottalam and Nathan Goldbaum, 
// https://github.com/BIDS/colormap/blob/master/colormaps.py 
// under creative commons http://creativecommons.org/publicdomain/zero/1.0/
let virdis = [
    "rgb(68.353024,1.247744,84.33024)",
    "rgb(68.73856,2.45888,85.869312)",
    "rgb(69.105664,3.744,87.393024)",
    "rgb(69.45408,5.105152,88.900864)",
    "rgb(69.784064,6.544128,90.391808)",
    "rgb(70.095104,8.063232,91.866368)",
    "rgb(70.387712,9.664512,93.323008)",
    "rgb(70.661632,11.306752,94.761984)",
    "rgb(70.916608,12.888064,96.18304)",
    "rgb(71.152896,14.418944,97.584896)",
    "rgb(71.370496,15.90912,98.967552)",
    "rgb(71.568896,17.366016,100.330752)",
    "rgb(71.748352,18.794752,101.673728)",
    "rgb(71.908864,20.200192,102.996224)",
    "rgb(72.050176,21.58592,104.297984)",
    "rgb(72.172544,22.954496,105.57824)",
    "rgb(72.275712,24.30848,106.836736)",
    "rgb(72.359936,25.650176,108.07296)",
    "rgb(72.42496,26.980608,109.286912)",
    "rgb(72.471296,28.301568,110.477824)",
    "rgb(72.498432,29.61408,111.64544)",
    "rgb(72.506624,30.918912,112.789504)",
    "rgb(72.495872,32.217088,113.90976)",
    "rgb(72.466432,33.50912,115.005696)",
    "rgb(72.418304,34.79552,116.077312)",
    "rgb(72.351488,36.077056,117.124352)",
    "rgb(72.26624,37.353472,118.14656)",
    "rgb(72.163072,38.625536,119.14368)",
    "rgb(72.041472,39.893504,120.115456)",
    "rgb(71.902208,41.157376,121.062144)",
    "rgb(71.74528,42.417408,121.983488)",
    "rgb(71.570944,43.673344,122.879232)",
    "rgb(71.379456,44.92544,123.749632)",
    "rgb(71.171072,46.173952,124.594432)",
    "rgb(70.946304,47.418368,125.413888)",
    "rgb(70.705664,48.658944,126.208256)",
    "rgb(70.448896,49.89568,126.97728)",
    "rgb(70.176768,51.128576,127.721216)",
    "rgb(69.889536,52.35712,128.440576)",
    "rgb(69.587968,53.581568,129.135104)",
    "rgb(69.27232,54.801664,129.805312)",
    "rgb(68.942848,56.017408,130.451712)",
    "rgb(68.599808,57.228544,131.074048)",
    "rgb(68.24448,58.435072,131.673344)",
    "rgb(67.87712,59.636736,132.249344)",
    "rgb(67.497728,60.833536,132.803072)",
    "rgb(67.107328,62.025216,133.334272)",
    "rgb(66.706176,63.212032,133.843968)",
    "rgb(66.29504,64.393472,134.332416)",
    "rgb(65.874432,65.56928,134.800128)",
    "rgb(65.44512,66.739968,135.247872)",
    "rgb(65.00736,67.905024,135.675648)",
    "rgb(64.561664,69.064448,136.084224)",
    "rgb(64.1088,70.21824,136.474368)",
    "rgb(63.649024,71.3664,136.846336)",
    "rgb(63.183616,72.508672,137.200896)",
    "rgb(62.712832,73.6448,137.53856)",
    "rgb(62.236928,74.775552,137.860096)",
    "rgb(61.756672,75.90016,138.165504)",
    "rgb(61.272576,77.01888,138.456064)",
    "rgb(60.784896,78.131712,138.731776)",
    "rgb(60.294656,79.238912,138.993664)",
    "rgb(59.802368,80.339968,139.241984)",
    "rgb(59.308544,81.435136,139.477504)",
    "rgb(58.813184,82.524416,139.700736)",
    "rgb(58.317312,83.608064,139.912192)",
    "rgb(57.820928,84.68608,140.112384)",
    "rgb(57.3248,85.758464,140.301568)",
    "rgb(56.829184,86.825216,140.480512)",
    "rgb(56.334592,87.886592,140.649728)",
    "rgb(55.84128,88.942592,140.809728)",
    "rgb(55.34976,89.99296,140.960512)",
    "rgb(54.860288,91.038464,141.103104)",
    "rgb(54.37312,92.078848,141.23776)",
    "rgb(53.888768,93.114112,141.364736)",
    "rgb(53.407488,94.144512,141.4848)",
    "rgb(52.929536,95.170048,141.597952)",
    "rgb(52.455168,96.190976,141.704448)",
    "rgb(51.984128,97.207296,141.8048)",
    "rgb(51.517184,98.21952,141.899264)",
    "rgb(51.05408,99.227392,141.988352)",
    "rgb(50.594816,100.231168,142.072064)",
    "rgb(50.14016,101.230848,142.150656)",
    "rgb(49.6896,102.226688,142.22464)",
    "rgb(49.243392,103.218944,142.294016)",
    "rgb(48.801536,104.207616,142.358784)",
    "rgb(48.364288,105.19296,142.419456)",
    "rgb(47.931136,106.174976,142.476032)",
    "rgb(47.502336,107.15392,142.528768)",
    "rgb(47.077888,108.130048,142.577664)",
    "rgb(46.657536,109.103104,142.62272)",
    "rgb(46.241024,110.0736,142.664192)",
    "rgb(45.828864,111.041536,142.70208)",
    "rgb(45.420288,112.006912,142.73664)",
    "rgb(45.015296,112.97024,142.76736)",
    "rgb(44.614144,113.931264,142.794752)",
    "rgb(44.216064,114.890496,142.81856)",
    "rgb(43.821056,115.84768,142.83904)",
    "rgb(43.429376,116.803072,142.85568)",
    "rgb(43.040256,117.756928,142.868992)",
    "rgb(42.653952,118.709248,142.878464)",
    "rgb(42.269952,119.660288,142.884096)",
    "rgb(41.888,120.610048,142.885888)",
    "rgb(41.508352,121.558528,142.88384)",
    "rgb(41.13024,122.50624,142.87744)",
    "rgb(40.753664,123.452672,142.866688)",
    "rgb(40.378624,124.398592,142.851328)",
    "rgb(40.00512,125.343744,142.831616)",
    "rgb(39.63264,126.288128,142.80704)",
    "rgb(39.261184,127.232,142.777344)",
    "rgb(38.891008,128.17536,142.742272)",
    "rgb(38.521856,129.118464,142.70208)",
    "rgb(38.153984,130.061056,142.656)",
    "rgb(37.787392,131.003648,142.604544)",
    "rgb(37.42208,131.945728,142.546688)",
    "rgb(37.058304,132.887808,142.482432)",
    "rgb(36.695808,133.829888,142.41152)",
    "rgb(36.33536,134.771968,142.333696)",
    "rgb(35.977216,135.713792,142.248704)",
    "rgb(35.621632,136.655872,142.156288)",
    "rgb(35.26912,137.597952,142.055936)",
    "rgb(34.920448,138.540288,141.947648)",
    "rgb(34.576896,139.482368,141.831424)",
    "rgb(34.238208,140.42496,141.706496)",
    "rgb(33.905664,141.367296,141.572608)",
    "rgb(33.580032,142.310144,141.429504)",
    "rgb(33.262848,143.252992,141.277184)",
    "rgb(32.954624,144.19584,141.114624)",
    "rgb(32.657408,145.138944,140.942336)",
    "rgb(32.371968,146.082048,140.759296)",
    "rgb(32.100864,147.025408,140.566016)",
    "rgb(31.84512,147.968512,140.361472)",
    "rgb(31.606528,148.911872,140.14592)",
    "rgb(31.387136,149.854976,139.918592)",
    "rgb(31.188736,150.79808,139.679488)",
    "rgb(31.013888,151.741184,139.428096)",
    "rgb(30.86464,152.684032,139.164416)",
    "rgb(30.743552,153.626624,138.88768)",
    "rgb(30.652928,154.56896,138.5984)",
    "rgb(30.595072,155.510784,138.295808)",
    "rgb(30.572288,156.452096,137.979392)",
    "rgb(30.587648,157.393152,137.649152)",
    "rgb(30.642944,158.33344,137.304832)",
    "rgb(30.740736,159.273216,136.946176)",
    "rgb(30.883328,160.211968,136.572928)",
    "rgb(31.07328,161.149952,136.185088)",
    "rgb(31.311872,162.087168,135.781888)",
    "rgb(31.601664,163.023104,135.363328)",
    "rgb(31.94368,163.958016,134.929408)",
    "rgb(32.339456,164.891392,134.479616)",
    "rgb(32.790272,165.823744,134.013696)",
    "rgb(33.297152,166.754304,133.531648)",
    "rgb(33.860608,167.683584,133.033216)",
    "rgb(34.481152,168.610816,132.518144)",
    "rgb(35.158784,169.536512,131.986176)",
    "rgb(35.89376,170.459904,131.437312)",
    "rgb(36.685568,171.381504,130.87104)",
    "rgb(37.533696,172.3008,130.287616)",
    "rgb(38.437888,173.217536,129.686784)",
    "rgb(39.396864,174.131968,129.068032)",
    "rgb(40.409856,175.04384,128.431616)",
    "rgb(41.476096,175.952896,127.777024)",
    "rgb(42.594048,176.859136,127.104512)",
    "rgb(43.762688,177.762304,126.413568)",
    "rgb(44.980992,178.6624,125.704448)",
    "rgb(46.247168,179.558912,124.976384)",
    "rgb(47.560448,180.452096,124.229888)",
    "rgb(48.91904,181.341696,123.464704)",
    "rgb(50.322176,182.227712,122.680576)",
    "rgb(51.768064,183.109632,121.877504)",
    "rgb(53.25568,183.987456,121.055488)",
    "rgb(54.784,184.861184,120.214528)",
    "rgb(56.351744,185.730304,119.353856)",
    "rgb(57.957632,186.595328,118.473984)",
    "rgb(59.60064,187.455232,117.574912)",
    "rgb(61.279744,188.310528,116.656128)",
    "rgb(62.99392,189.16096,115.718144)",
    "rgb(64.742144,190.006016,114.760704)",
    "rgb(66.523392,190.845952,113.783552)",
    "rgb(68.336896,191.680256,112.786688)",
    "rgb(70.182144,192.508928,111.769856)",
    "rgb(72.058112,193.331968,110.733312)",
    "rgb(73.963776,194.148864,109.677056)",
    "rgb(75.898624,194.959616,108.601088)",
    "rgb(77.861888,195.764224,107.505408)",
    "rgb(79.8528,196.562432,106.390016)",
    "rgb(81.871104,197.353984,105.254912)",
    "rgb(83.915776,198.13888,104.09984)",
    "rgb(85.98656,198.916608,102.924544)",
    "rgb(88.082944,199.687424,101.729536)",
    "rgb(90.20416,200.450816,100.514816)",
    "rgb(92.349696,201.206784,99.280384)",
    "rgb(94.518784,201.955328,98.025984)",
    "rgb(96.711424,202.695936,96.752384)",
    "rgb(98.926848,203.428864,95.458816)",
    "rgb(101.164544,204.1536,94.145792)",
    "rgb(103.424256,204.8704,92.813312)",
    "rgb(105.705728,205.578496,91.460864)",
    "rgb(108.008448,206.278144,90.08896)",
    "rgb(110.331648,206.969088,88.697856)",
    "rgb(112.675072,207.651328,87.287552)",
    "rgb(115.038208,208.324608,85.858304)",
    "rgb(117.420544,208.988928,84.410112)",
    "rgb(119.821568,209.643776,82.943488)",
    "rgb(122.241024,210.289664,81.45792)",
    "rgb(124.678656,210.925824,79.954176)",
    "rgb(127.13344,211.552256,78.432512)",
    "rgb(129.605376,212.169216,76.892672)",
    "rgb(132.093952,212.776448,75.335424)",
    "rgb(134.598656,213.373696,73.760512)",
    "rgb(137.118976,213.96096,72.168448)",
    "rgb(139.654144,214.537984,70.560256)",
    "rgb(142.203904,215.105024,68.935936)",
    "rgb(144.767488,215.66208,67.296512)",
    "rgb(147.344128,216.208896,65.64224)",
    "rgb(149.933568,216.745216,63.973632)",
    "rgb(152.534784,217.271552,62.292224)",
    "rgb(155.14752,217.787648,60.598272)",
    "rgb(157.771008,218.293504,58.893312)",
    "rgb(160.404224,218.78912,57.178368)",
    "rgb(163.046912,219.274752,55.45472)",
    "rgb(165.697792,219.7504,53.724416)",
    "rgb(168.356352,220.216064,51.988992)",
    "rgb(171.021824,220.671744,50.251008)",
    "rgb(173.693184,221.117952,48.512768)",
    "rgb(176.369664,221.554688,46.7776)",
    "rgb(179.05024,221.981952,45.048576)",
    "rgb(181.733888,222.400256,43.329792)",
    "rgb(184.420096,222.8096,41.626368)",
    "rgb(187.107584,223.210496,39.943424)",
    "rgb(189.795328,223.602944,38.287616)",
    "rgb(192.482304,223.987456,36.666368)",
    "rgb(195.167488,224.364544,35.088384)",
    "rgb(197.850112,224.734208,33.563904)",
    "rgb(200.52864,225.09696,32.10368)",
    "rgb(203.20256,225.453568,30.72128)",
    "rgb(205.870592,225.803776,29.43104)",
    "rgb(208.531456,226.148608,28.248832)",
    "rgb(211.18464,226.48832,27.191552)",
    "rgb(213.82912,226.823424,26.277376)",
    "rgb(216.463616,227.154432,25.523712)",
    "rgb(219.08736,227.481856,24.947712)",
    "rgb(221.699328,227.806208,24.563968)",
    "rgb(224.299008,228.128,24.384)",
    "rgb(226.885376,228.447744,24.415744)",
    "rgb(229.45792,228.765696,24.66176)",
    "rgb(232.015616,229.08288,25.12)",
    "rgb(234.557952,229.399296,25.783552)",
    "rgb(237.083136,229.71648,26.642176)",
    "rgb(239.591424,230.03392,27.681536)",
    "rgb(242.082816,230.35264,28.886528)",
    "rgb(244.5568,230.67264,30.240768)",
    "rgb(247.012864,230.994688,31.728896)",
    "rgb(249.450752,231.31904,33.33504)",
    "rgb(251.870208,231.645952,35.045632)",
    "rgb(254.271488,231.976192,36.847616)"
];
let magma = [
    "rgb(0.374272,0.119296,3.549696)",
    "rgb(0.578048,0.33152,4.692736)",
    "rgb(0.839424,0.59008,6.069248)",
    "rgb(1.155072,0.89344,7.67104)",
    "rgb(1.5232,1.239808,9.50528)",
    "rgb(1.942528,1.627136,11.513088)",
    "rgb(2.413056,2.053632,13.528064)",
    "rgb(2.93504,2.515968,15.552)",
    "rgb(3.509248,3.013376,17.578752)",
    "rgb(4.135936,3.54304,19.610368)",
    "rgb(4.81664,4.102656,21.653504)",
    "rgb(5.553152,4.68992,23.70816)",
    "rgb(6.346752,5.30304,25.773056)",
    "rgb(7.199488,5.939456,27.849472)",
    "rgb(8.114176,6.59584,29.94304)",
    "rgb(9.09312,7.269632,32.053504)",
    "rgb(10.139648,7.95904,34.17984)",
    "rgb(11.22048,8.66048,36.322816)",
    "rgb(12.303872,9.371392,38.483712)",
    "rgb(13.39392,10.088192,40.663296)",
    "rgb(14.49344,10.79296,42.866176)",
    "rgb(15.602944,11.467264,45.089024)",
    "rgb(16.72448,12.113408,47.332352)",
    "rgb(17.859584,12.729856,49.59616)",
    "rgb(19.009792,13.316352,51.88096)",
    "rgb(20.17664,13.871104,54.186752)",
    "rgb(21.362176,14.3936,56.51328)",
    "rgb(22.56768,14.882048,58.860032)",
    "rgb(23.794944,15.335424,61.225984)",
    "rgb(25.045248,15.751936,63.610112)",
    "rgb(26.32064,16.13056,66.010624)",
    "rgb(27.622144,16.46976,68.425984)",
    "rgb(28.952064,16.765952,70.856704)",
    "rgb(30.31168,17.018624,73.298176)",
    "rgb(31.701248,17.22752,75.745024)",
    "rgb(33.12128,17.39136,78.193408)",
    "rgb(34.573568,17.508096,80.64)",
    "rgb(36.059648,17.575424,83.081728)",
    "rgb(37.57696,17.596928,85.506816)",
    "rgb(39.126784,17.571072,87.911424)",
    "rgb(40.708608,17.498624,90.288128)",
    "rgb(42.318848,17.385216,92.624896)",
    "rgb(43.958528,17.23008,94.917376)",
    "rgb(45.622272,17.043456,97.151232)",
    "rgb(47.309056,16.827392,99.321088)",
    "rgb(49.01376,16.593408,101.414912)",
    "rgb(50.733312,16.348672,103.426304)",
    "rgb(52.46336,16.104192,105.347584)",
    "rgb(54.199808,15.869952,107.173632)",
    "rgb(55.939072,15.656448,108.900352)",
    "rgb(57.677312,15.47392,110.525952)",
    "rgb(59.411712,15.331584,112.04992)",
    "rgb(61.139456,15.236352,113.473536)",
    "rgb(62.859008,15.194112,114.799616)",
    "rgb(64.56832,15.21024,116.031488)",
    "rgb(66.267392,15.284736,117.17376)",
    "rgb(67.954432,15.420672,118.23104)",
    "rgb(69.630464,15.614464,119.20896)",
    "rgb(71.294208,15.866368,120.11264)",
    "rgb(72.947456,16.171008,120.947456)",
    "rgb(74.589696,16.525568,121.718272)",
    "rgb(76.22144,16.925952,122.430208)",
    "rgb(77.844736,17.36576,123.087872)",
    "rgb(79.457792,17.843712,123.695616)",
    "rgb(81.063424,18.35264,124.25728)",
    "rgb(82.662144,18.888192,124.776448)",
    "rgb(84.253184,19.448832,125.257472)",
    "rgb(85.838848,20.028416,125.702144)",
    "rgb(87.419392,20.624384,126.113536)",
    "rgb(88.994816,21.234176,126.494976)",
    "rgb(90.565888,21.855488,126.848256)",
    "rgb(92.133888,22.484736,127.175168)",
    "rgb(93.699072,23.120384,127.47776)",
    "rgb(95.261696,23.760896,127.757568)",
    "rgb(96.822016,24.404992,128.017152)",
    "rgb(98.380544,25.05088,128.256512)",
    "rgb(99.938304,25.697024,128.477184)",
    "rgb(101.495552,26.342912,128.680448)",
    "rgb(103.052288,26.98752,128.866816)",
    "rgb(104.609024,27.63008,129.037312)",
    "rgb(106.165504,28.270336,129.193472)",
    "rgb(107.722496,28.90752,129.33504)",
    "rgb(109.280512,29.54112,129.462784)",
    "rgb(110.839552,30.17088,129.57696)",
    "rgb(112.399872,30.796288,129.67808)",
    "rgb(113.961728,31.417344,129.766656)",
    "rgb(115.525376,32.033792,129.842688)",
    "rgb(117.090816,32.645632,129.906688)",
    "rgb(118.658048,33.252608,129.958912)",
    "rgb(120.22784,33.85472,129.999104)",
    "rgb(121.79968,34.451712,130.027776)",
    "rgb(123.373824,35.044096,130.045184)",
    "rgb(124.950528,35.631616,130.050816)",
    "rgb(126.530048,36.214272,130.044928)",
    "rgb(128.112128,36.792064,130.02752)",
    "rgb(129.697024,37.365248,129.998336)",
    "rgb(131.284736,37.933824,129.957888)",
    "rgb(132.87552,38.498048,129.905408)",
    "rgb(134.46912,39.057664,129.841152)",
    "rgb(136.065792,39.613184,129.76512)",
    "rgb(137.66528,40.164864,129.677056)",
    "rgb(139.26784,40.712448,129.576704)",
    "rgb(140.873472,41.256448,129.464064)",
    "rgb(142.482176,41.796864,129.33888)",
    "rgb(144.093696,42.334208,129.201152)",
    "rgb(145.708032,42.868224,129.05088)",
    "rgb(147.32544,43.39968,128.887296)",
    "rgb(148.945664,43.928576,128.710912)",
    "rgb(150.568448,44.454912,128.52096)",
    "rgb(152.194048,44.979456,128.317696)",
    "rgb(153.822208,45.502208,128.100864)",
    "rgb(155.452928,46.023424,127.869952)",
    "rgb(157.085952,46.543616,127.625216)",
    "rgb(158.72128,47.06304,127.366144)",
    "rgb(160.358656,47.581952,127.092736)",
    "rgb(161.99808,48.100608,126.804992)",
    "rgb(163.639296,48.619776,126.5024)",
    "rgb(165.282048,49.139712,126.18496)",
    "rgb(166.926336,49.660416,125.852416)",
    "rgb(168.571648,50.182912,125.504768)",
    "rgb(170.21824,50.7072,125.142016)",
    "rgb(171.865344,51.234048,124.763648)",
    "rgb(173.513216,51.763968,124.369664)",
    "rgb(175.161344,52.297216,123.960064)",
    "rgb(176.809216,52.834304,123.534848)",
    "rgb(178.457088,53.376256,123.09376)",
    "rgb(180.104192,53.923328,122.636544)",
    "rgb(181.750272,54.476032,122.163456)",
    "rgb(183.395072,55.035392,121.67424)",
    "rgb(185.03808,55.601664,121.168896)",
    "rgb(186.679296,56.175872,120.647424)",
    "rgb(188.317696,56.758528,120.11008)",
    "rgb(189.953024,57.3504,119.556608)",
    "rgb(191.584768,57.952512,118.987264)",
    "rgb(193.212672,58.565632,118.402304)",
    "rgb(194.835712,59.190784,117.801472)",
    "rgb(196.453888,59.82848,117.18528)",
    "rgb(198.06592,60.479744,116.553984)",
    "rgb(199.671808,61.145856,115.90784)",
    "rgb(201.270272,61.827584,115.247104)",
    "rgb(202.861312,62.525952,114.571008)",
    "rgb(204.443648,63.24224,113.881088)",
    "rgb(206.016512,63.977216,113.178112)",
    "rgb(207.57888,64.732416,112.46208)",
    "rgb(209.129984,65.50912,111.734016)",
    "rgb(210.669056,66.308096,110.994688)",
    "rgb(212.194816,67.130624,110.244864)",
    "rgb(213.706496,67.97824,109.483776)",
    "rgb(215.202816,68.851968,108.714496)",
    "rgb(216.682496,69.753088,107.937536)",
    "rgb(218.144256,70.683136,107.154688)",
    "rgb(219.587328,71.643392,106.366976)",
    "rgb(221.00992,72.634624,105.575168)",
    "rgb(222.411008,73.658368,104.781568)",
    "rgb(223.789056,74.715904,103.98848)",
    "rgb(225.142784,75.808,103.198208)",
    "rgb(226.470656,76.93568,102.412032)",
    "rgb(227.771136,78.100224,101.632512)",
    "rgb(229.0432,79.301888,100.86272)",
    "rgb(230.285312,80.541696,100.105472)",
    "rgb(231.495936,81.82016,99.363072)",
    "rgb(232.674304,83.13728,98.638848)",
    "rgb(233.818624,84.493312,97.936128)",
    "rgb(234.928384,85.888,97.25824)",
    "rgb(236.002304,87.321088,96.608256)",
    "rgb(237.039872,88.792064,95.989504)",
    "rgb(238.04032,90.299904,95.405312)",
    "rgb(239.003136,91.843584,94.858496)",
    "rgb(239.928576,93.421824,94.353152)",
    "rgb(240.815872,95.033344,93.891072)",
    "rgb(241.665536,96.676608,93.474816)",
    "rgb(242.47808,98.349568,93.107456)",
    "rgb(243.25376,100.04992,92.791808)",
    "rgb(243.993344,101.776128,92.528128)",
    "rgb(244.697344,103.5264,92.318464)",
    "rgb(245.366784,105.298944,92.163584)",
    "rgb(246.002944,107.090688,92.06528)",
    "rgb(246.60736,108.89984,92.024064)",
    "rgb(247.180544,110.724864,92.039424)",
    "rgb(247.723776,112.563968,92.11136)",
    "rgb(248.23808,114.415616,92.239616)",
    "rgb(248.724992,116.27776,92.42368)",
    "rgb(249.185536,118.14912,92.66304)",
    "rgb(249.620992,120.028416,92.956416)",
    "rgb(250.03264,121.913856,93.303296)",
    "rgb(250.42176,123.804672,93.7024)",
    "rgb(250.78912,125.699584,94.152448)",
    "rgb(251.136,127.597568,94.651904)",
    "rgb(251.463424,129.497856,95.199744)",
    "rgb(251.77216,131.39968,95.794688)",
    "rgb(252.063232,133.302528,96.434688)",
    "rgb(252.337408,135.205888,97.118976)",
    "rgb(252.5952,137.108992,97.84576)",
    "rgb(252.837376,139.01184,98.61376)",
    "rgb(253.064448,140.914176,99.42144)",
    "rgb(253.276928,142.815488,100.267776)",
    "rgb(253.475328,144.715776,101.151232)",
    "rgb(253.662976,146.612736,102.070784)",
    "rgb(253.838848,148.507392,103.024896)",
    "rgb(254.002176,150.400512,104.012544)",
    "rgb(254.15296,152.292096,105.032448)",
    "rgb(254.291456,154.1824,106.08384)",
    "rgb(254.421504,156.068864,107.164928)",
    "rgb(254.543104,157.951744,108.2752)",
    "rgb(254.652928,159.8336,109.413632)",
    "rgb(254.751232,161.714176,110.579456)",
    "rgb(254.84288,163.590912,111.771392)",
    "rgb(254.92736,165.464064,112.988416)",
    "rgb(255.000576,167.336704,114.230528)",
    "rgb(255.063296,169.208064,115.49696)",
    "rgb(255.12448,171.073536,116.785152)",
    "rgb(255.1744,172.938496,118.096384)",
    "rgb(255.2128,174.803968,119.430656)",
    "rgb(255.251712,176.662528,120.783616)",
    "rgb(255.279616,178.521344,122.158592)",
    "rgb(255.297024,180.380416,123.55456)",
    "rgb(255.3152,182.233088,124.967424)",
    "rgb(255.321856,184.086784,126.40128)",
    "rgb(255.321856,185.938944,127.853568)",
    "rgb(255.319296,187.78752,129.322752)",
    "rgb(255.30496,189.637632,130.811648)",
    "rgb(255.290368,191.483136,132.315904)",
    "rgb(255.267328,193.32864,133.838336)",
    "rgb(255.236864,195.173888,135.378176)",
    "rgb(255.205888,197.015296,136.932352)",
    "rgb(255.162112,198.85952,138.505984)",
    "rgb(255.122176,200.698112,140.091648)",
    "rgb(255.070464,202.538752,141.695744)",
    "rgb(255.017472,204.377088,143.31392)",
    "rgb(254.958592,206.214912,144.947712)",
    "rgb(254.89408,208.052736,146.59712)",
    "rgb(254.828544,209.888,148.25984)",
    "rgb(254.753536,211.725312,149.939456)",
    "rgb(254.681856,213.558528,151.630592)",
    "rgb(254.598144,215.395072,153.339648)",
    "rgb(254.520832,217.22624,155.058176)",
    "rgb(254.429696,219.062016,156.795392)",
    "rgb(254.34752,220.891904,158.540544)",
    "rgb(254.25152,222.726144,160.304384)",
    "rgb(254.164736,224.555008,162.075904)",
    "rgb(254.06464,226.38848,163.865344)",
    "rgb(253.974784,228.21632,165.661696)",
    "rgb(253.872128,230.048512,167.475712)",
    "rgb(253.780992,231.875328,169.295104)",
    "rgb(253.67808,233.70624,171.131136)",
    "rgb(253.58592,235.532544,172.9728)",
    "rgb(253.4848,237.362176,174.829056)",
    "rgb(253.39264,239.188224,176.690688)",
    "rgb(253.295104,241.01632,178.564864)",
    "rgb(253.203712,242.842624,180.444928)",
    "rgb(253.111552,244.669952,182.333952)",
    "rgb(253.021952,246.496768,184.230144)",
    "rgb(252.936448,248.323072,186.131712)",
    "rgb(252.848896,250.151424,188.041216)",
    "rgb(252.771072,251.977728,189.952512)",
    "rgb(252.685568,253.808128,191.873024)"
];
let inferno = [
    "rgb(0.374272,0.119296,3.549696)",
    "rgb(0.580352,0.32512,4.75392)",
    "rgb(0.844544,0.575744,6.205184)",
    "rgb(1.164032,0.868352,7.912704)",
    "rgb(1.537536,1.201152,9.870848)",
    "rgb(1.965056,1.570816,11.990016)",
    "rgb(2.447616,1.974528,14.116608)",
    "rgb(2.985728,2.410752,16.24576)",
    "rgb(3.58272,2.8736,18.396672)",
    "rgb(4.239616,3.362816,20.552192)",
    "rgb(4.959488,3.874048,22.724352)",
    "rgb(5.746432,4.402944,24.915712)",
    "rgb(6.603008,4.948736,27.11808)",
    "rgb(7.534592,5.504768,29.342976)",
    "rgb(8.54656,6.067712,31.589632)",
    "rgb(9.643008,6.635776,33.851392)",
    "rgb(10.816768,7.203584,36.132096)",
    "rgb(12.01024,7.762944,38.441984)",
    "rgb(13.220864,8.313344,40.769024)",
    "rgb(14.450944,8.849664,43.113984)",
    "rgb(15.70304,9.36704,45.476352)",
    "rgb(16.980736,9.857024,47.862272)",
    "rgb(18.285824,10.315264,50.266624)",
    "rgb(19.619072,10.72768,52.684544)",
    "rgb(20.982272,11.091968,55.113984)",
    "rgb(22.377216,11.406336,57.552128)",
    "rgb(23.80544,11.669248,59.995648)",
    "rgb(25.267712,11.878912,62.439424)",
    "rgb(26.765056,12.034048,64.87808)",
    "rgb(28.297216,12.134144,67.305472)",
    "rgb(29.863936,12.178944,69.714176)",
    "rgb(31.464448,12.169216,72.095744)",
    "rgb(33.09696,12.107008,74.441728)",
    "rgb(34.759168,11.995136,76.742656)",
    "rgb(36.448768,11.837952,78.989568)",
    "rgb(38.162688,11.639808,81.17376)",
    "rgb(39.8976,11.407104,83.286528)",
    "rgb(41.648384,11.149824,85.318912)",
    "rgb(43.4112,10.877184,87.263744)",
    "rgb(45.182208,10.598912,89.116416)",
    "rgb(46.957824,10.324224,90.872576)",
    "rgb(48.733952,10.063104,92.530432)",
    "rgb(50.508032,9.8304,94.08896)",
    "rgb(52.277504,9.633792,95.548928)",
    "rgb(54.04032,9.47968,96.912128)",
    "rgb(55.794944,9.37344,98.181632)",
    "rgb(57.539328,9.31968,99.361024)",
    "rgb(59.273728,9.31968,100.4544)",
    "rgb(60.997888,9.374976,101.466368)",
    "rgb(62.711552,9.48608,102.401792)",
    "rgb(64.41472,9.65248,103.264768)",
    "rgb(66.107904,9.874176,104.06016)",
    "rgb(67.79136,10.149632,104.79232)",
    "rgb(69.464832,10.476032,105.465856)",
    "rgb(71.1296,10.842368,106.084352)",
    "rgb(72.786176,11.246848,106.651648)",
    "rgb(74.435328,11.684864,107.171072)",
    "rgb(76.077568,12.15232,107.645696)",
    "rgb(77.713408,12.645376,108.078592)",
    "rgb(79.34336,13.160192,108.472576)",
    "rgb(80.968192,13.69344,108.829696)",
    "rgb(82.58816,14.242304,109.152512)",
    "rgb(84.203776,14.803712,109.442816)",
    "rgb(85.815552,15.37536,109.702144)",
    "rgb(87.424,15.9552,109.9328)",
    "rgb(89.029376,16.541696,110.135552)",
    "rgb(90.632192,17.1328,110.311936)",
    "rgb(92.232704,17.727232,110.463232)",
    "rgb(93.831424,18.324224,110.590464)",
    "rgb(95.428608,18.92224,110.6944)",
    "rgb(97.024256,19.520768,110.776064)",
    "rgb(98.618368,20.119296,110.83648)",
    "rgb(100.211968,20.717312,110.875904)",
    "rgb(101.804544,21.313792,110.894848)",
    "rgb(103.396864,21.90848,110.893824)",
    "rgb(104.988928,22.501376,110.873088)",
    "rgb(106.580736,23.091968,110.833408)",
    "rgb(108.172544,23.680256,110.774784)",
    "rgb(109.764608,24.26624,110.697472)",
    "rgb(111.356672,24.849664,110.601984)",
    "rgb(112.948992,25.430528,110.488064)",
    "rgb(114.541568,26.008832,110.35648)",
    "rgb(116.134656,26.585088,110.207488)",
    "rgb(117.728,27.158784,110.040576)",
    "rgb(119.3216,27.730432,109.856)",
    "rgb(120.915968,28.300032,109.653504)",
    "rgb(122.510848,28.867584,109.4336)",
    "rgb(124.105984,29.433344,109.196288)",
    "rgb(125.701632,29.997824,108.941312)",
    "rgb(127.297792,30.561024,108.668928)",
    "rgb(128.894208,31.1232,108.379136)",
    "rgb(130.49088,31.684864,108.071936)",
    "rgb(132.087552,32.24576,107.747072)",
    "rgb(133.684736,32.8064,107.404544)",
    "rgb(135.281664,33.367296,107.044352)",
    "rgb(136.878848,33.928704,106.666752)",
    "rgb(138.47552,34.490624,106.271488)",
    "rgb(140.072192,35.053824,105.858816)",
    "rgb(141.668352,35.618304,105.428224)",
    "rgb(143.263744,36.184576,104.979968)",
    "rgb(144.858624,36.753152,104.514048)",
    "rgb(146.452736,37.324032,104.030464)",
    "rgb(148.045824,37.897984,103.529216)",
    "rgb(149.637376,38.475264,103.01056)",
    "rgb(151.227904,39.056128,102.47424)",
    "rgb(152.81664,39.641088,101.92)",
    "rgb(154.403584,40.230656,101.348096)",
    "rgb(155.98848,40.825344,100.758784)",
    "rgb(157.571328,41.425152,100.152064)",
    "rgb(159.15136,42.031104,99.527936)",
    "rgb(160.728832,42.6432,98.886656)",
    "rgb(162.303488,43.261952,98.228224)",
    "rgb(163.87456,43.888128,97.55264)",
    "rgb(165.44256,44.521984,96.859904)",
    "rgb(167.006464,45.163776,96.150016)",
    "rgb(168.566528,45.814272,95.423488)",
    "rgb(170.12224,46.473984,94.680576)",
    "rgb(171.673344,47.143168,93.921024)",
    "rgb(173.219328,47.822592,93.145344)",
    "rgb(174.759936,48.512256,92.353792)",
    "rgb(176.295168,49.213184,91.546368)",
    "rgb(177.824512,49.925376,90.723328)",
    "rgb(179.347456,50.649856,89.884928)",
    "rgb(180.864,51.386368,89.030912)",
    "rgb(182.373376,52.135936,88.162048)",
    "rgb(183.875584,52.898816,87.278336)",
    "rgb(185.370368,53.67552,86.380544)",
    "rgb(186.856704,54.466304,85.468416)",
    "rgb(188.334848,55.271936,84.54272)",
    "rgb(189.804288,56.092672,83.603456)",
    "rgb(191.264512,56.928768,82.651136)",
    "rgb(192.715264,57.780736,81.68576)",
    "rgb(194.156032,58.648832,80.708096)",
    "rgb(195.58656,59.533824,79.718144)",
    "rgb(197.006336,60.435712,78.71616)",
    "rgb(198.415104,61.354752,77.702656)",
    "rgb(199.812352,62.291712,76.677888)",
    "rgb(201.197824,63.246336,75.642112)",
    "rgb(202.571008,64.219136,74.59584)",
    "rgb(203.931392,65.210368,73.539584)",
    "rgb(205.278976,66.220544,72.473344)",
    "rgb(206.612992,67.249152,71.397888)",
    "rgb(207.933184,68.297216,70.313216)",
    "rgb(209.239296,69.364224,69.21984)",
    "rgb(210.530816,70.450432,68.11776)",
    "rgb(211.807232,71.556352,67.008)",
    "rgb(213.068544,72.681728,65.890048)",
    "rgb(214.31424,73.82656,64.764928)",
    "rgb(215.544064,74.990848,63.632384)",
    "rgb(216.757504,76.175104,62.492928)",
    "rgb(217.954304,77.37856,61.346816)",
    "rgb(219.133952,78.601728,60.194048)",
    "rgb(220.296448,79.844352,59.035136)",
    "rgb(221.441536,81.106432,57.87008)",
    "rgb(222.568704,82.387712,56.699392)",
    "rgb(223.677696,83.687936,55.522816)",
    "rgb(224.768256,85.00736,54.340608)",
    "rgb(225.840128,86.345472,53.152768)",
    "rgb(226.893312,87.702016,51.959808)",
    "rgb(227.927296,89.076992,50.761216)",
    "rgb(228.94208,90.470144,49.557504)",
    "rgb(229.937152,91.881216,48.34816)",
    "rgb(230.912768,93.309952,47.133696)",
    "rgb(231.86816,94.75584,45.9136)",
    "rgb(232.80384,96.219136,44.688128)",
    "rgb(233.719296,97.698816,43.45728)",
    "rgb(234.614272,99.195136,42.220544)",
    "rgb(235.489024,100.707584,40.97792)",
    "rgb(236.34304,102.235904,39.729408)",
    "rgb(237.17632,103.779584,38.474752)",
    "rgb(237.988864,105.338624,37.213952)",
    "rgb(238.780672,106.912512,35.946752)",
    "rgb(239.551232,108.500736,34.67264)",
    "rgb(240.3008,110.103296,33.392128)",
    "rgb(241.029376,111.71968,32.104704)",
    "rgb(241.73696,113.349632,30.810624)",
    "rgb(242.42304,114.992896,29.509632)",
    "rgb(243.087872,116.64896,28.201984)",
    "rgb(243.7312,118.317568,26.887936)",
    "rgb(244.353536,119.998464,25.567744)",
    "rgb(244.954112,121.691136,24.24192)",
    "rgb(245.533184,123.395584,22.911744)",
    "rgb(246.091008,125.111296,21.577984)",
    "rgb(246.627072,126.838272,20.242688)",
    "rgb(247.141632,128.575744,18.907904)",
    "rgb(247.634432,130.323968,17.576704)",
    "rgb(248.105728,132.082176,16.252928)",
    "rgb(248.555264,133.850368,14.941952)",
    "rgb(248.98304,135.628288,13.650944)",
    "rgb(249.389056,137.41568,12.388352)",
    "rgb(249.773312,139.212288,11.166208)",
    "rgb(250.135552,141.0176,9.9968)",
    "rgb(250.476032,142.831872,8.942336)",
    "rgb(250.794496,144.654592,8.040704)",
    "rgb(251.090944,146.485504,7.298048)",
    "rgb(251.36512,148.324352,6.72)",
    "rgb(251.617536,150.171136,6.313216)",
    "rgb(251.847424,152.025344,6.08512)",
    "rgb(252.055296,153.887232,6.043136)",
    "rgb(252.24064,155.756032,6.195712)",
    "rgb(252.403712,157.632,6.551552)",
    "rgb(252.544512,159.51488,7.120384)",
    "rgb(252.662784,161.40416,7.912448)",
    "rgb(252.758272,163.29984,8.938496)",
    "rgb(252.831232,165.20192,10.210816)",
    "rgb(252.881664,167.109888,11.668736)",
    "rgb(252.909056,169.024,13.248)",
    "rgb(252.91392,170.943488,14.932224)",
    "rgb(252.895744,172.868352,16.705792)",
    "rgb(252.854784,174.798592,18.557184)",
    "rgb(252.790784,176.733696,20.47744)",
    "rgb(252.703744,178.673664,22.459136)",
    "rgb(252.593664,180.61824,24.497664)",
    "rgb(252.4608,182.567168,26.588928)",
    "rgb(252.304896,184.520192,28.730624)",
    "rgb(252.12544,186.477312,30.92096)",
    "rgb(251.9232,188.438272,33.158912)",
    "rgb(251.698176,190.402048,35.443968)",
    "rgb(251.450368,192.369152,37.77664)",
    "rgb(251.180288,194.33856,40.156928)",
    "rgb(250.888192,196.310272,42.586368)",
    "rgb(250.574336,198.28352,45.065472)",
    "rgb(250.239232,200.258048,47.596288)",
    "rgb(249.883648,202.233344,50.180608)",
    "rgb(249.507328,204.209152,52.820992)",
    "rgb(249.110528,206.184704,55.520512)",
    "rgb(248.695808,208.159232,58.280448)",
    "rgb(248.264448,210.1312,61.103616)",
    "rgb(247.818496,212.09984,63.992832)",
    "rgb(247.358208,214.064896,66.952704)",
    "rgb(246.884864,216.025088,69.988096)",
    "rgb(246.404352,217.977856,73.099776)",
    "rgb(245.920256,219.921664,76.29056)",
    "rgb(245.43232,221.855744,79.56992)",
    "rgb(244.949504,223.777024,82.937344)",
    "rgb(244.479232,225.681664,86.3936)",
    "rgb(244.02304,227.569152,89.950464)",
    "rgb(243.595776,229.433856,93.600512)",
    "rgb(243.204608,231.272704,97.349376)",
    "rgb(242.862848,233.081088,101.193984)",
    "rgb(242.584064,234.854144,105.13024)",
    "rgb(242.383104,236.587008,109.151488)",
    "rgb(242.276352,238.274816,113.245952)",
    "rgb(242.279168,239.912704,117.399552)",
    "rgb(242.407168,241.497088,121.59232)",
    "rgb(242.671872,243.025408,125.805056)",
    "rgb(243.08352,244.496128,130.01216)",
    "rgb(243.64544,245.910272,134.195968)",
    "rgb(244.359424,247.269376,138.332416)",
    "rgb(245.221376,248.576768,142.4064)",
    "rgb(246.223872,249.836544,146.4128)",
    "rgb(247.359744,251.053568,150.324736)",
    "rgb(248.617472,252.232192,154.151424)",
    "rgb(249.986816,253.376768,157.89056)",
    "rgb(251.457792,254.491904,161.540352)",
    "rgb(253.020672,255.581184,165.100544)"
];
let plasma = [
    "rgb(12.898048,7.629568,135.1616)",
    "rgb(16.265216,7.277056,136.479744)",
    "rgb(19.290368,6.964736,137.729792)",
    "rgb(22.072832,6.688,138.920448)",
    "rgb(24.673024,6.44224,140.058368)",
    "rgb(27.13088,6.223104,141.150208)",
    "rgb(29.471744,6.030336,142.199808)",
    "rgb(31.719168,5.856768,143.212288)",
    "rgb(33.889536,5.698048,144.192)",
    "rgb(35.994368,5.551872,145.141504)",
    "rgb(38.043392,5.415424,146.063872)",
    "rgb(40.043776,5.286656,146.96064)",
    "rgb(42.00192,5.163776,147.834368)",
    "rgb(43.922944,5.044736,148.686336)",
    "rgb(45.8112,4.928512,149.517824)",
    "rgb(47.670528,4.813568,150.330368)",
    "rgb(49.503744,4.698624,151.12448)",
    "rgb(51.31392,4.582912,151.901184)",
    "rgb(53.10336,4.465152,152.661248)",
    "rgb(54.8736,4.345088,153.405184)",
    "rgb(56.626432,4.223232,154.133248)",
    "rgb(58.363648,4.097792,154.845952)",
    "rgb(60.08704,3.968512,155.543552)",
    "rgb(61.797376,3.834624,156.226304)",
    "rgb(63.496192,3.696384,156.894208)",
    "rgb(65.184512,3.553792,157.547264)",
    "rgb(66.862848,3.406848,158.185216)",
    "rgb(68.531968,3.255296,158.808576)",
    "rgb(70.192896,3.099904,159.416832)",
    "rgb(71.845888,2.940928,160.009728)",
    "rgb(73.491456,2.77888,160.58752)",
    "rgb(75.130368,2.614528,161.14944)",
    "rgb(76.76288,2.447616,161.695744)",
    "rgb(78.38976,2.278912,162.225664)",
    "rgb(80.011008,2.109184,162.7392)",
    "rgb(81.627136,1.939456,163.23584)",
    "rgb(83.2384,1.77024,163.715072)",
    "rgb(84.845056,1.602816,164.176896)",
    "rgb(86.446848,1.438208,164.620544)",
    "rgb(88.0448,1.277696,165.04576)",
    "rgb(89.6384,1.121792,165.452288)",
    "rgb(91.227904,0.972288,165.83936)",
    "rgb(92.813568,0.830208,166.20672)",
    "rgb(94.395648,0.697344,166.553856)",
    "rgb(95.973632,0.57472,166.880256)",
    "rgb(97.548032,0.464384,167.185408)",
    "rgb(99.118848,0.367104,167.469312)",
    "rgb(100.685824,0.285184,167.730944)",
    "rgb(102.249216,0.219904,167.970048)",
    "rgb(103.808768,0.173568,168.186112)",
    "rgb(105.36448,0.147712,168.37888)",
    "rgb(106.916352,0.144384,168.54784)",
    "rgb(108.464384,0.165376,168.692736)",
    "rgb(110.008064,0.212736,168.8128)",
    "rgb(111.547904,0.288512,168.908032)",
    "rgb(113.083392,0.39424,168.977664)",
    "rgb(114.614784,0.53248,169.02144)",
    "rgb(116.141312,0.70528,169.03936)",
    "rgb(117.663488,0.914944,169.030912)",
    "rgb(119.1808,1.16352,168.995584)",
    "rgb(120.692992,1.453568,168.933632)",
    "rgb(122.200064,1.78688,168.844544)",
    "rgb(123.70176,2.16576,168.72832)",
    "rgb(125.19808,2.592512,168.584704)",
    "rgb(126.688512,3.06944,168.41344)",
    "rgb(128.173568,3.59808,168.214528)",
    "rgb(129.652224,4.181248,167.987712)",
    "rgb(131.124736,4.821248,167.733504)",
    "rgb(132.590848,5.520128,167.451904)",
    "rgb(134.050048,6.280192,167.142656)",
    "rgb(135.502336,7.103232,166.806016)",
    "rgb(136.947712,7.991552,166.44224)",
    "rgb(138.38592,8.9472,166.05184)",
    "rgb(139.816192,9.972224,165.63456)",
    "rgb(141.23904,11.042816,165.190912)",
    "rgb(142.654208,12.116736,164.721408)",
    "rgb(144.060928,13.19552,164.226304)",
    "rgb(145.459456,14.279168,163.706112)",
    "rgb(146.849792,15.367168,163.161344)",
    "rgb(148.231424,16.459776,162.592256)",
    "rgb(149.604096,17.556224,161.999872)",
    "rgb(150.968064,18.656768,161.384448)",
    "rgb(152.322816,19.76064,160.746752)",
    "rgb(153.668096,20.868096,160.087552)",
    "rgb(155.00416,21.978624,159.407616)",
    "rgb(156.330752,23.092224,158.707456)",
    "rgb(157.647872,24.208384,157.98784)",
    "rgb(158.955264,25.327104,157.249792)",
    "rgb(160.252672,26.447872,156.49408)",
    "rgb(161.540352,27.570944,155.721472)",
    "rgb(162.818048,28.695552,154.93248)",
    "rgb(164.085504,29.821952,154.12864)",
    "rgb(165.343232,30.949888,153.309952)",
    "rgb(166.590976,32.079104,152.477952)",
    "rgb(167.82848,33.2096,151.633152)",
    "rgb(169.055744,34.340864,150.776576)",
    "rgb(170.273024,35.472896,149.908992)",
    "rgb(171.48032,36.605952,149.031424)",
    "rgb(172.677632,37.739264,148.144128)",
    "rgb(173.86496,38.873088,147.248384)",
    "rgb(175.042048,40.007168,146.34496)",
    "rgb(176.209408,41.141504,145.434368)",
    "rgb(177.36704,42.276096,144.517632)",
    "rgb(178.514944,43.410688,143.595264)",
    "rgb(179.652864,44.54528,142.667776)",
    "rgb(180.781568,45.679872,141.736192)",
    "rgb(181.900544,46.814208,140.801024)",
    "rgb(183.010048,47.948544,139.862528)",
    "rgb(184.110336,49.082624,138.921728)",
    "rgb(185.201664,50.216448,137.979136)",
    "rgb(186.28352,51.350016,137.035008)",
    "rgb(187.356672,52.483328,136.089856)",
    "rgb(188.420864,53.616384,135.144448)",
    "rgb(189.476608,54.749184,134.199296)",
    "rgb(190.523392,55.881728,133.254144)",
    "rgb(191.561984,57.014016,132.309504)",
    "rgb(192.591872,58.146048,131.366144)",
    "rgb(193.613824,59.27808,130.423808)",
    "rgb(194.627584,60.409856,129.483264)",
    "rgb(195.633408,61.541376,128.544256)",
    "rgb(196.63104,62.673152,127.60704)",
    "rgb(197.621248,63.804672,126.672128)",
    "rgb(198.603776,64.936448,125.739776)",
    "rgb(199.578624,66.067968,124.809984)",
    "rgb(200.546048,67.2,123.883008)",
    "rgb(201.506048,68.332032,122.958592)",
    "rgb(202.45888,69.46432,122.036736)",
    "rgb(203.404544,70.59712,121.117952)",
    "rgb(204.343296,71.730432,120.201728)",
    "rgb(205.27488,72.864256,119.288576)",
    "rgb(206.199552,73.998592,118.37824)",
    "rgb(207.117312,75.133696,117.47072)",
    "rgb(208.028672,76.269568,116.566528)",
    "rgb(208.932864,77.406208,115.664896)",
    "rgb(209.830656,78.543872,114.766336)",
    "rgb(210.721792,79.682816,113.870336)",
    "rgb(211.606528,80.822784,112.976896)",
    "rgb(212.484608,81.964032,112.086016)",
    "rgb(213.356032,83.10656,111.197696)",
    "rgb(214.221056,84.25088,110.31168)",
    "rgb(215.07968,85.39648,109.42848)",
    "rgb(215.931904,86.543872,108.547328)",
    "rgb(216.777728,87.693056,107.668224)",
    "rgb(217.616896,88.844288,106.791168)",
    "rgb(218.449664,89.997568,105.915904)",
    "rgb(219.276032,91.152896,105.042432)",
    "rgb(220.096,92.310528,104.170752)",
    "rgb(220.909312,93.470464,103.300864)",
    "rgb(221.715968,94.63296,102.432256)",
    "rgb(222.515968,95.798272,101.564928)",
    "rgb(223.309568,96.966144,100.69888)",
    "rgb(224.096256,98.136832,99.833856)",
    "rgb(224.876288,99.310592,98.9696)",
    "rgb(225.649408,100.487424,98.106624)",
    "rgb(226.415616,101.667584,97.24416)",
    "rgb(227.174912,102.851072,96.382464)",
    "rgb(227.92704,104.037888,95.52128)",
    "rgb(228.672,105.228288,94.660608)",
    "rgb(229.409536,106.422272,93.800192)",
    "rgb(230.139904,107.620352,92.940032)",
    "rgb(230.862592,108.822272,92.080128)",
    "rgb(231.577856,110.028032,91.220224)",
    "rgb(232.28544,111.238144,90.36032)",
    "rgb(232.985088,112.452608,89.50016)",
    "rgb(233.6768,113.671424,88.640256)",
    "rgb(234.360576,114.894592,87.77984)",
    "rgb(235.035904,116.122368,86.919424)",
    "rgb(235.702784,117.354752,86.058496)",
    "rgb(236.361472,118.592256,85.197056)",
    "rgb(237.0112,119.834368,84.33536)",
    "rgb(237.652224,121.0816,83.473152)",
    "rgb(238.284288,122.333952,82.610432)",
    "rgb(238.907392,123.59168,81.7472)",
    "rgb(239.52128,124.854272,80.883712)",
    "rgb(240.12544,126.122752,80.0192)",
    "rgb(240.720128,127.396352,79.154432)",
    "rgb(241.305088,128.675584,78.288896)",
    "rgb(241.880064,129.960448,77.422848)",
    "rgb(242.445056,131.250944,76.556544)",
    "rgb(242.999552,132.547328,75.689472)",
    "rgb(243.544064,133.8496,74.8224)",
    "rgb(244.077568,135.15776,73.954048)",
    "rgb(244.60032,136.471808,73.08544)",
    "rgb(245.112064,137.792,72.216576)",
    "rgb(245.612544,139.118336,71.347456)",
    "rgb(246.102016,140.450816,70.47808)",
    "rgb(246.579968,141.78944,69.608704)",
    "rgb(247.046144,143.134208,68.739328)",
    "rgb(247.500288,144.485376,67.870208)",
    "rgb(247.942656,145.8432,67.000576)",
    "rgb(248.37248,147.207168,66.1312)",
    "rgb(248.78976,148.577792,65.262336)",
    "rgb(249.194496,149.954816,64.39424)",
    "rgb(249.586432,151.33824,63.526656)",
    "rgb(249.965568,152.72832,62.660352)",
    "rgb(250.331136,154.125056,61.795072)",
    "rgb(250.683648,155.528192,60.931328)",
    "rgb(251.022336,156.937984,60.069376)",
    "rgb(251.347456,158.354432,59.209472)",
    "rgb(251.658496,159.777536,58.351872)",
    "rgb(251.954944,161.207808,57.49632)",
    "rgb(252.237056,162.64448,56.64384)",
    "rgb(252.50432,164.088064,55.794688)",
    "rgb(252.756992,165.538048,54.949888)",
    "rgb(252.99456,166.9952,54.109184)",
    "rgb(253.216768,168.459008,53.2736)",
    "rgb(253.42336,169.929472,52.443904)",
    "rgb(253.614336,171.406848,51.620352)",
    "rgb(253.78944,172.89088,50.803968)",
    "rgb(253.94816,174.381824,49.99552)",
    "rgb(254.090496,175.87968,49.19552)",
    "rgb(254.216192,177.384192,48.405504)",
    "rgb(254.324736,178.89536,47.626496)",
    "rgb(254.416384,180.413696,46.859008)",
    "rgb(254.490368,181.938688,46.104832)",
    "rgb(254.546944,183.470336,45.365248)",
    "rgb(254.585344,185.008896,44.641536)",
    "rgb(254.605568,186.554368,43.935232)",
    "rgb(254.607616,188.106496,43.248128)",
    "rgb(254.59072,189.66528,42.58176)",
    "rgb(254.55488,191.23072,41.938176)",
    "rgb(254.500096,192.803072,41.319424)",
    "rgb(254.425856,194.381824,40.727552)",
    "rgb(254.331392,195.967744,40.164096)",
    "rgb(254.216448,197.56032,39.630848)",
    "rgb(254.08128,199.159552,39.13088)",
    "rgb(253.925632,200.765184,38.666752)",
    "rgb(253.749504,202.377472,38.240512)",
    "rgb(253.552384,203.995904,37.85472)",
    "rgb(253.334272,205.62048,37.511424)",
    "rgb(253.093888,207.252224,37.211392)",
    "rgb(252.830976,208.890368,36.956928)",
    "rgb(252.546304,210.534656,36.750592)",
    "rgb(252.240384,212.184576,36.59392)",
    "rgb(251.911936,213.84064,36.487168)",
    "rgb(251.559168,215.503872,36.429568)",
    "rgb(251.18464,217.172224,36.423424)",
    "rgb(250.788864,218.845696,36.467968)",
    "rgb(250.36672,220.526592,36.558848)",
    "rgb(249.92384,222.212096,36.697856)",
    "rgb(249.457408,223.903232,36.879616)",
    "rgb(248.96768,225.6,37.100288)",
    "rgb(248.456448,227.301376,37.355264)",
    "rgb(247.921408,229.008384,37.635584)",
    "rgb(247.365376,230.719744,37.93408)",
    "rgb(246.789376,232.4352,38.23872)",
    "rgb(246.190336,234.156032,38.53312)",
    "rgb(245.574656,235.880192,38.800896)",
    "rgb(244.942848,237.606912,39.016704)",
    "rgb(244.297472,239.336448,39.147776)",
    "rgb(243.641856,241.067776,39.1488)",
    "rgb(242.982656,242.79936,38.957568)",
    "rgb(242.330112,244.52864,38.483968)",
    "rgb(241.702912,246.250496,37.596416)",
    "rgb(241.125376,247.95904,36.084736)",
    "rgb(240.64384,249.640448,33.619456)"
];

const colorMaps = {
    linear: (a) => { return `rgb(${Math.round(lerp(153, 31, a))}, ${Math.round(lerp(242, 64, a))},${Math.round(lerp(200, 55, a))})` },
    blackAndWhite: (a) => { return `rgb(${Math.round(lerp(0, 256, a))}, ${Math.round(lerp(0, 256, a))},${Math.round(lerp(0, 256, a))})` },
    cubeHelix: (a) => { return cubehelix.Uy[Math.round(a * cubehelix.Ux.length - 1)] },
    dracula: (a) => { return `rgb(${lerp(250, 100, a)}, ${0},${0})` },
    virdis: (a) => { return virdis[Math.round(a * virdis.length - 1)] },
    magma: (a) => { return magma[Math.round(a * magma.length - 1)] },
    inferno: (a) => { return inferno[Math.round(a * inferno.length - 1)] },
    plasma: (a) => { return plasma[Math.round(a * plasma.length - 1)] },
    psychedelic: (a) => { return cubehelix.psychedelic[Math.round(a * cubehelix.psychedelic.length - 1)] },

}

let colorMapSelected = "virdis";

function draw(posx) {
    let ext = getExtremum(plotSelection);
    let normalizedValue = 0;
    // color grid 
    for (let i = 1; i < NX - 1; i++) {
        for (let j = 1; j < NY - 1; j++) {
            let index = IX(i, j);
            normalizedValue = (grid[index][plotSelection] - ext.min) / (ext.max - ext.min);

            ctx.fillStyle = colorMaps[colorMapSelected](normalizedValue);

            // color obstacles 
            if (grid[index].isObstacle) {
                ctx.fillStyle = 'rgba(0, 0, 0, 100%)';
            }

            ctx.fillRect(i * N, j * N, N, N);
            if (i === posx) {
                ctx.fillStyle = 'rgba(255, 205, 0, 50%)';
                ctx.fillRect(i * N, j * N, N, N);
            }
        }

    }
    // ctx.putImageData(simage, 0, 0);
    ctx.font = "10px Times New Roman";
    ctx.fillStyle = "rgba(0,0,100,90%)";
    ctx.fillText(`μ = ${Math.round(mu * 100) / 100}; [Ux,Uy] = [${ux0},${uy0}]; Δt:${deltaT}; step:${timeStep};`, 10, simulationCanvas.height - 10);

}



function setImageData(x, y, r, g, b, a) {
    simage.data[x * (simage.width * 4) + y * 4] = r;
    simage.data[x * (simage.width * 4) + y * 4 + 1] = g;
    simage.data[x * (simage.width * 4) + y * 4 + 2] = b;
    simage.data[x * (simage.width * 4) + y * 4 + 3] = a;
}
// color legend 
const colorLegend = document.getElementById("colorMapLegend");
const Ncolor = 15;
let clctx = colorLegend.getContext("2d");
colorLegend.width = 50;
colorLegend.height = 120;
let legendWidth = 20;
function setColorLegend() {
    clctx.fillStyle = "black";
    clctx.font = "10px Arial";
    clctx.fillText("0", 23, 10);
    clctx.fillText("1", 23, colorLegend.height - 5);
    for (let n = 0; n < Ncolor; n++) {
        clctx.fillStyle = colorMaps[colorMapSelected](n / Ncolor);
        clctx.fillRect(0, colorLegend.height * n / Ncolor, legendWidth, colorLegend.height);
    }
    // // draw graph borders 
    // clctx.beginPath();
    // clctx.moveTo(0, 0);
    // clctx.lineTo(0, colorLegend.height);
    // clctx.lineTo(legendWidth, colorLegend.height);
    // clctx.lineTo(legendWidth, 0);
    // clctx.lineTo(0, 0);
    // clctx.stroke();
}

setColorLegend();

// ======================================================================================
// DRAW GRAPHS 

// graph profiles 
const profilePlot = document.getElementById("profilePlot");
const gctx = profilePlot.getContext("2d");

const profilePlotCaption = document.getElementById("profilePlotCaption");
const xPos = document.getElementById("xPos");

const profilePlotxLabel = document.getElementById("xLabel");
const plotSelectionLegend = document.getElementById("plotSelectionLegend");

const trackHistory = document.getElementById("trackHistory");

const plotContours = document.getElementById("contourPlot");


let plotWidth = 350;
let plotHeight = 200;
let buffer = 30;
profilePlot.width = plotWidth + buffer;
profilePlot.height = plotHeight + buffer;

let profilePlotTitles = {
    rho: "Normalized Density (ρ<sub>i</sub> / ρ<sub>max</sub>)",
    ux: "Normalized X-Velocity (U<sub>i</sub> / U<sub>max</sub>)",
    uy: "Normalized Y-Velocity (U<sub>i</sub> / U<sub>max</sub>)",
    vorticity: "Normalized Vorticity (ω<sub>i</sub> / ω<sub>max</sub>)",
}

function plotProfile(posx) {
    let ext = getExtremum(plotSelection); //get absolute mins and maxes to normalize values 
    let data = [0];
    for (let i = 1; i < NY - 1; i++) {
        data.push((grid[IX(posx, i)][plotSelection] - ext.min) / (ext.max - ext.min));
    }
    data.push(0);
    // graph data 
    gctx.beginPath();
    gctx.moveTo(0, 0);
    for (let i = 0; i < data.length; i++) {
        gctx.lineTo(plotWidth * data[i], plotHeight * i / data.length);
    }
    gctx.stroke();

    gctx.strokeStyle = "black";
    // draw graph borders 
    gctx.beginPath();
    gctx.moveTo(0, 0);
    gctx.lineTo(0, plotHeight);
    gctx.lineTo(plotWidth, plotHeight);
    gctx.lineTo(plotWidth, 0);
    gctx.lineTo(0, 0);
    gctx.stroke();


    // draw tick marks 
    for (let i = 0; i <= 1; i += 0.1) {
        gctx.beginPath();
        gctx.moveTo(plotWidth * i, plotHeight);
        gctx.lineTo(plotWidth * i, profilePlot.height * 0.9);
        gctx.closePath();
        gctx.stroke();
    }

    gctx.font = 'normal 20px Times New Roman';
    profilePlotCaption.textContent = `${plotSelection} profile plot at x = ${posx}`;
    profilePlotxLabel.innerHTML = profilePlotTitles[plotSelection];
    gctx.fillText("1", plotWidth - 10, profilePlot.height);
    gctx.fillText("0", 0, profilePlot.height);

}


// plot the histogram 

const histogramPlot = document.getElementById("histogramPlot");
const hctx = histogramPlot.getContext("2d");

let histogramWidth = 200;
let histogramHeight = 200;
histogramPlot.width = histogramWidth + buffer;
histogramPlot.height = histogramHeight + buffer;

const histogramCaption = document.getElementById("histogramCaption");
const xHistogramLabel = document.getElementById("xHistogramLabel");

function resetTitles(plotSelection) {
    histogramCaption.textContent = plotSelection + " histogram";
    xHistogramLabel.textContent = plotSelection;
}

function plotHistogram() {
    let data = [];
    for (let i = 0; i < NX; i++) {
        for (let j = 0; j < NY; j++) {
            data.push((grid[IX(i, j)][plotSelection]));
        }
    }

    let max = Math.max(...data);
    let min = Math.min(...data);

    let norm_data = data.map(x => ((x - min) / (max - min))).sort((a, b) => a - b);
    // let norm_data = [0, 0.1, 0.1, 0.2, 0.3, 0.4, 0.6];
    let numBins = 500;
    let bins = [];
    for (let i = 1; i <= numBins; i++) {
        bins.push(countInRange(norm_data, i / numBins, (i - 1) / numBins));
    }
    // graph data 
    // console.log(range, bins);
    for (let i = 0; i < numBins; i++) {
        hctx.fillRect(histogramWidth * i / numBins, histogramHeight,
            histogramWidth / numBins, -histogramHeight * 0.9 * (bins[i] - Math.min(...bins)) / (Math.max(...bins) - Math.min(...bins)));
    }
    hctx.beginPath();
    hctx.moveTo(0, 0);
    hctx.lineTo(0, histogramHeight);
    hctx.lineTo(histogramWidth, histogramHeight);
    hctx.stroke();

    // draw tick marks 
    for (let i = 0; i <= 1; i += 0.2) {
        hctx.beginPath();
        hctx.moveTo(histogramWidth * i, histogramHeight);
        hctx.lineTo(histogramWidth * i, histogramPlot.height * 0.9);
        hctx.closePath();
        hctx.stroke();
    }

}
let countInRange = function (array, h, l) {
    let count = 0;
    for (let i = 0; i < array.length; i++) {
        if (array[i] > h) return count;
        if (array[i] <= h && array[i] >= l) count++;
    }
    return count;
}



// ======================================================================================
// draw countour lines - Marching squares algo based on Rephael Wenger book https://web.cse.ohio-state.edu/~wenger.4/ "Isosurfaces: Geometry, Topology, and Algorithms" chapter 2. 
let isovalues = [];

for (let i = 0; i < 10; i++) {
    isovalues.push(i / 10);
}

function drawContour(isovalue) {
    let ext = getExtremum(plotSelection);
    let value = 0;
    let booleanGrid = [];
    let normGrid = [];
    let state = 0;
    // each side of a marching square; 
    let a = { x: 0, y: 0 };
    let b = { x: 0, y: 0 };
    let c = { x: 0, y: 0 };
    let d = { x: 0, y: 0 };

    for (let i = 0; i < NX; i++) {
        for (let j = 0; j < NY; j++) {
            value = (grid[IX(i, j)][plotSelection] - ext.min) / (ext.max - ext.min);
            normGrid[IX(i, j)] = value;
            if (value > isovalue) {
                booleanGrid[IX(i, j)] = 1;
            }
            else {
                booleanGrid[IX(i, j)] = 0;
            }
        }
    }

    for (let i = 1; i < NX - 1; i++) {
        for (let j = 1; j < NY - 1; j++) {
            a.x = getDisp(i, j, i + 1, j, i, i + 1, normGrid, isovalue);
            a.y = j;

            b.x = i + 1;
            b.y = getDisp(i + 1, j, i + 1, j + 1, j, j + 1, normGrid, isovalue);


            c.x = getDisp(i + 1, j + 1, i, j + 1, i + 1, i, normGrid, isovalue);
            c.y = j + 1;

            d.x = i;
            d.y = getDisp(i, j + 1, i, j, j + 1, j, normGrid, isovalue);

            state = booleanGrid[IX(i, j)] * 8 + booleanGrid[IX(i + 1, j)] * 4 + booleanGrid[IX(i, j + 1)] * 1 + booleanGrid[IX(i + 1, j + 1)] * 2;
            (isolines[state] || isolines[1])(a, b, c, d);

        }
    }
}

var getDisp = function (x0, y0, x1, y1, c1, c2, grid, isovalue) {
    let sigma = (isovalue - grid[IX(x0, y0)]) / (grid[IX(x1, y1)] - grid[IX(x0, y0)]);
    let disp = (1 - sigma) * c1 + sigma * c2;
    return disp;
};


let isolines = {
    0: () => { },
    1: (a, b, c, d) => {
        drawLine(d, c);
    },
    2: (a, b, c, d) => {
        drawLine(b, c);
    },
    3: (a, b, c, d) => {
        drawLine(d, b);
    },
    4: (a, b, c, d) => {
        drawLine(a, b);
    },
    5: (a, b, c, d) => {
        drawLine(a, d);
        drawLine(b, c);
    },
    6: (a, b, c, d) => {
        drawLine(a, c);
    },
    7: (a, b, c, d) => {
        drawLine(a, d);
    },
    8: (a, b, c, d) => {
        drawLine(a, d);
    },
    9: (a, b, c, d) => {
        drawLine(a, c);
    },
    10: (a, b, c, d) => {
        drawLine(a, b);
        drawLine(d, c);
    },
    11: (a, b, c, d) => {
        drawLine(a, b);
    },
    12: (a, b, c, d) => {
        drawLine(d, b);
    },
    13: (a, b, c, d) => {
        drawLine(b, c);
    },
    14: (a, b, c, d) => {
        drawLine(d, c);
    },
    15: (a, b, c, d) => {
    },

};

function drawLine(p1, p2) {
    ctx.beginPath();
    ctx.moveTo(p1.x * N, p1.y * N);
    ctx.lineTo(p2.x * N, p2.y * N);
    ctx.stroke();
}

//==========================================================================
// ANIMATION LOOP 


initialize();
const moveObstacles = document.getElementById("moveObstacles");

function simulate() {
    setCurl();
    ctx.clearRect(0, 0, simulationCanvas.width, simulationCanvas.height);
    let histogramColor = colorMaps[colorMapSelected](0.5);
    hctx.fillStyle = histogramColor.substring(0, histogramColor.length - 1) + ',20%)';
    gctx.strokeStyle = histogramColor.substring(0, histogramColor.length - 1) + ',20%)';

    if (!trackHistory.checked) {
        gctx.strokeStyle = "rgb(0,0,0)";
        hctx.fillStyle = "rgb(0,0,0)";
        hctx.clearRect(0, 0, histogramPlot.width, histogramPlot.height);
        gctx.clearRect(0, 0, profilePlot.width, profilePlot.height);
    }

    if (animating) {
        mu = ux0 * obsRadius / Re.value;            //update viscosity
        omega = 1 / (3 * mu + 0.5);                 //update relaxation parameter
        reynoldsDisplay.textContent = `Reynolds number: ${Re.value}`

        for (let i = 1; i < deltaT; i++) {
            collide();
            stream();
            timeStep += i;
        }
    }


    if (!plotContours.checked) draw(Number(xPos.value));
    plotProfile(Number(xPos.value));
    plotHistogram();

    if (plotContours.checked) {
        for (let i = 0; i < isovalues.length; i++) {
            ctx.strokeStyle = colorMaps[colorMapSelected](isovalues[i]);
            ctx.lineWidth = 1.3;
            drawContour(isovalues[i]);
        }
    }


    if (moveObstacles.checked) {
        setObstacle(obsRadius, obsXpos, obsYpos, startAngle, endAngle, shapeSelection, true);
    }

    requestAnimationFrame(simulate);
}

simulate();



// =============================================================
//Accessory functions

function dotMatrix(a, b) {
    return a.map((x, i) => a[i] * b[i]).reduce((m, n) => m + n);
}

function sumMatrix(a) {
    return a.reduce((a, b) => a + b)
}

function IX(i, j) {
    return i + NX * j;
}

function curl(i, j) {
    return (grid[IX(i, j + 1)].ux - grid[IX(i, j - 1)].ux) - (grid[IX(i - 1, j)].uy - grid[IX(i - 1, j)].uy);
}

function setCurl() {
    for (let i = 1; i < NX - 1; i++) {
        for (let j = 1; j < NY - 1; j++) {
            grid[IX(i, j)].vorticity = curl(i, j);
        }

    }
}


function getExtremum(plotSelection) {
    let array = grid.map(function (e) { return e[plotSelection] });
    let max = Math.max(...array);
    let min = Math.min(...array);
    return {
        max, min
    }
}
// =====================================================================================
// EVENT LISTENRES 

simulationCanvas.addEventListener('click', (e) => {
    e.preventDefault();
    // clearObstacles();
    let x = Math.floor(e.offsetX / N);
    let y = Math.floor(e.offsetY / N);
    // obsXpos = mouse.i;
    // obsYpos = mouse.j;

    setObstacle(obsRadius, x - obsRadius, y - obsRadius, startAngle, endAngle, shapeSelection);
    // particles.push(new Particle(x, y))
    // console.log(mouse.i, mouse.j);
    console.log(grid[IX(x, y)]);

});


for (let i = 0; i < plotOptionButtons.length; i++) {
    plotOptionButtons[i].addEventListener('change', function (event) {
        if (event.target.checked) {
            plotSelection = event.target.value;
            gctx.clearRect(0, 0, profilePlot.width, profilePlot.height);
            hctx.clearRect(0, 0, histogramPlot.width, histogramPlot.height);
        }
        resetTitles(plotSelection);
    });
}



for (let i = 0; i < shapeOptionButtons.length; i++) {
    shapeOptionButtons[i].addEventListener('change', function (event) {
        if (event.target.checked) {
            shapeSelection = event.target.value;
            resetSimulation();
            setObstacle(obsRadius, obsXpos, obsYpos, startAngle, endAngle, shapeSelection);
            gctx.clearRect(0, 0, profilePlot.width, profilePlot.height);
            hctx.clearRect(0, 0, histogramPlot.width, histogramPlot.height);
        }
    });
}

const playpausebtn = document.getElementById("playpausebtn");
const pauseIcon = document.getElementById("pauseIcon");
const playIcon = document.getElementById("playIcon");

playpausebtn.addEventListener('click', updatePausePlayButtons);
function updatePausePlayButtons() {
    if (animating === false) {
        pauseIcon.style.display = "block";
        playIcon.style.display = "none"
        animating = true;
    } else {
        pauseIcon.style.display = "none";
        playIcon.style.display = "block"
        animating = false;
    }
}

const replay = document.getElementById("replay");

replay.addEventListener('click', resetSimulation);

function clearObstacles() {
    for (let i = 0; i < NX; i++) {
        for (let j = 0; j < NY; j++) {
            grid[IX(i, j)].isObstacle = false;
        }
    }
}


function resetSimulation() {
    initialize();
    setObstacle(obsRadius, obsXpos, obsYpos, startAngle, endAngle, "line");
    hctx.clearRect(0, 0, histogramPlot.width, histogramPlot.height);
    gctx.clearRect(0, 0, profilePlot.width, profilePlot.height);
    timeStep = 0;
}


xPos.addEventListener("change", () => gctx.clearRect(0, 0, profilePlot.width, profilePlot.height));

trackHistory.addEventListener('change', () => {
    hctx.clearRect(0, 0, histogramPlot.width, histogramPlot.height);
    gctx.clearRect(0, 0, profilePlot.width, profilePlot.height);
});




const playbackSpeed = document.getElementById("playbackSpeed");
let playbackCounter = 2;
playbackSpeed.addEventListener("click", () => {
    switch (playbackCounter) {
        case 0:
            deltaT = 3;
            playbackCounter++;
            playbackSpeed.textContent = "x0.5";
            break;
        case 1:
            deltaT = 6;
            playbackCounter++;
            playbackSpeed.textContent = "x1";
            break;
        default:
            deltaT = 12;
            playbackCounter -= 2;
            playbackSpeed.textContent = "x2";
            break;
    }

})

const colorMapSelector = document.getElementById("colorMapSelector");
colorMapSelector.addEventListener("change", function (e) {
    colorMapSelected = e.target.value;
    setColorLegend();
});

const resolutionSelector = document.getElementById('resolutionSelector');

function updateResolution() {
    N = resolutionSelector.value;
    NX = simulationCanvas.width / N;
    NY = simulationCanvas.height / N;
    obsRadius = NY * 0.1;
    obsXpos = NX * 0.1;
    obsYpos = NY * 0.5;
    createGrid();
    initialize();
    setObstacle(obsRadius, obsXpos, obsYpos, startAngle, endAngle, shapeSelection, 0);

    xPos.max = NX;
}

resolutionSelector.addEventListener("change", updateResolution);



